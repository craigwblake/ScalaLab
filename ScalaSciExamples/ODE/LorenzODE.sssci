
import  org.apache.commons.math.ode._
import  org.apache.commons.math.ode.sampling._
import  org.apache.commons.math.ode.nonstiff._

import scala.collection.mutable.ArrayBuffer

  var  DropCnt = 500
  var  M = 20000
  var vx = new Array[Double](M)
  var vy = new Array[Double](M)
  var vz = new Array[Double](M)

class LorenzODE() extends AnyRef with   FirstOrderDifferentialEquations  {
  

 
def  getDimension = 3

def computeDerivatives(t: Double, y: Array[Double], yDot: Array[Double]) =  {
  yDot(0) = 10*(y(1)-y(0))
  yDot(1) = -y(0)*y(2)+143*y(0)-y(1)
  yDot(2) = y(0)*y(1) - 2.66*y(2)
  }
}


 var stepHandler = new StepHandler() {

   def  reset = { }
   
  
   var cnt=0
   def  handleStep( interpolator: StepInterpolator, isLast: Boolean)= {
       var  t = interpolator.getCurrentTime()
       var  y = interpolator.getInterpolatedState()
       var  up = M+DropCnt
       cnt += 1
       var cntM=0
       if (cnt > DropCnt ) {
        vx = vx + y(0)
        vy = vy + y(1)
        vz = vz + y(2) 
          }
         }
      //println(t + "  "+y(0)+"  "+y(1))
     }


 
     
var dp853 =  new DormandPrince853Integrator(1.0e-8, 100.0, 1.0e-10, 1.0e-10)
dp853.addStepHandler(stepHandler)


var ode = new LorenzODE( )
var y = Array(0.0, 1.0, 0.0)
dp853.integrate(ode, 0.0, y, 50, y)



plot(vx, vy, vz)

vx



